name: Damg

on:
  push:
    branches:
      - main
     
jobs: 
  build:
    name: Code-integration-deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # - name: Print Directory
      #   run: ls -al

      - name: Create .env File
        run: |
          cd Application
          printf "%s" "${{ secrets.ENTIRE_ENV }}" > .env

      # - name: Docker Install
      #   uses: docker-practice/actions-setup-docker@master
      #   timeout-minutes: 12
        
      # - name: Docker System Cleanup (Prevent Disk Space Errors)
      #   run: |
      #     docker system prune -af --volumes
      #     docker builder prune --all --force


      # - name: Docker Compose Build
      #   run: |
      #     cd Application
      #     set -x

      #     docker version

      #     docker compose build


      - name: Configure AWS CLI #gcp cli
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Login to ECR  #Add new docker image to an existing VM, reboot
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # - name: Tag and Push Docker Images to ECR   #SSH into vm, and start docker
      #   run: |         
      #     docker tag streamlit-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MY_REPO }}:latest
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MY_REPO }}:latest

      #     docker tag fastapi-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MY_REPO }}:latest
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MY_REPO }}:latest
      # 
      - name: Create SSH Key File
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem
      - name: Verify .env File Exists
        run: ls -al

      - name: Copy .env File to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no Application/.env ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/


      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Define variables
          STREAMLIT_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MY_REPO }}/streamlit-app:latest
          FASTAPI_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.MY_REPO }}/fastapi-app:latest
          STREAMLIT_PORT=8501
          FASTAPI_PORT=8000

          # Pull the latest images
          docker pull \$STREAMLIT_IMAGE
          docker pull \$FASTAPI_IMAGE

          # Stop and remove existing containers
          docker ps -q --filter "ancestor=\$STREAMLIT_IMAGE" | xargs -r docker stop
          docker ps -q --filter "ancestor=\$FASTAPI_IMAGE" | xargs -r docker stop

          docker ps -a -q --filter "ancestor=\$STREAMLIT_IMAGE" | xargs -r docker rm
          docker ps -a -q --filter "ancestor=\$FASTAPI_IMAGE" | xargs -r docker rm

          # Start new containers
          docker run -d --env-file /home/ec2-user/.env -p \$STREAMLIT_PORT:8501 \$STREAMLIT_IMAGE
          docker run -d --env-file /home/ec2-user/.env -p \$FASTAPI_PORT:8000 \$FASTAPI_IMAGE

          EOF



          
          

